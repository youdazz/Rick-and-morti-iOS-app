//
//  ListCharactersWorker.swift
//  Rick and Morti
//
//  Created by Youchen Zhou on 4/2/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class ListCharactersWorker
{
    
    var charactersApi: CharactersProtocol
    var charactersCoreData: CharactersProtocol
    
    init(charactersApi: CharactersProtocol, charactersCoreData: CharactersProtocol) {
        self.charactersApi = charactersApi
        self.charactersCoreData = charactersCoreData
    }
    
    func fetchCharactersFromNetwork(completionHandler: @escaping (CharactersApiResponse) -> Void, errorHandler: @escaping (ServiceOperationError) -> Void){
        // fetch api data
      charactersApi.fetchCharacters { serviceResult in
          switch serviceResult{
          case .Success(let result):
              self.charactersCoreData.deleteCharacters { response in
                  switch serviceResult{
                  case .Success:
                      print("Success deleting data in core data")
                  case .Failure:
                      print("Failed to delete data in core data")
                  }
              }
              self.charactersCoreData.createCharacters(characters: result.results) { response in
                  switch serviceResult{
                  case .Success:
                      print("Success saving data in core data")
                  case .Failure:
                      print("Failed to save data in core data")
                  }
              }
              completionHandler(result)
          case .Failure(let error):
              errorHandler(error)
          }
      }
    }
    
    func fetchCharactersFromCoreData(completionHandler: @escaping (CharactersApiResponse) -> Void, errorHandler: @escaping (ServiceOperationError) -> Void){
        // fetch stored data
        charactersCoreData.fetchCharacters { serviceResult in
            switch serviceResult{
            case .Success(let result):
                completionHandler(result)
            case .Failure(let error):
                errorHandler(error)
            }
        }
    }
    
    func fetchNextPage(urlString: String, completionHandler: @escaping (CharactersApiResponse) -> Void, errorHandler: @escaping (ServiceOperationError) -> Void){
        charactersApi.fetchNextPage(urlString: urlString) {
            serviceResult in
                switch serviceResult{
                case .Success(let result):
                    completionHandler(result)
                case .Failure(let error):
                    errorHandler(error)
                }
        }
    }
    
    
}
