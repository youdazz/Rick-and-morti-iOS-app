//
//  CharacterDetailPresenter.swift
//  Rick and Morti
//
//  Created by Youchen Zhou on 6/2/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CharacterDetailPresentationLogic
{
  func presentCharacter(response: CharacterDetail.GetCharacter.Response)
    func presentOperationError(error: ServiceOperationError)
    func presentEpisodes(response: CharacterDetail.FetchEpisodes.Response)
}

class CharacterDetailPresenter: CharacterDetailPresentationLogic
{
    
  weak var viewController: CharacterDetailDisplayLogic?
  
  // MARK: Do something
  
  func presentCharacter(response: CharacterDetail.GetCharacter.Response)
  {
      let viewModel = CharacterDetail.GetCharacter.ViewModel(character: response.character)
      viewController?.displayCharacter(viewModel: viewModel)
  }
    
    func presentOperationError(error: ServiceOperationError) {
        DispatchQueue.main.async {
            var error_message = ""
            switch error{
            case .CannotFetch(let msg):
                error_message = msg
            case .CannotCreate(let msg):
                error_message = msg
            case .CannotDelete(let msg):
                error_message = msg
            }
            self.viewController?.displayError(msg: error_message)
        }
    }
    
    func presentEpisodes(response: CharacterDetail.FetchEpisodes.Response) {
        var displayedEpisodes = [CharacterDetail.FetchEpisodes.ViewModel.DisplayedEpisode]()
        for episode in response.episodes {
            let displayedEpisode = CharacterDetail.FetchEpisodes.ViewModel.DisplayedEpisode(name: episode.name, air_date: episode.air_date, episode: episode.episode)
            displayedEpisodes.append(displayedEpisode)
        }
        DispatchQueue.main.async {
            let viewModel = CharacterDetail.FetchEpisodes.ViewModel(displayedEpisodes: displayedEpisodes)
            self.viewController?.displayFetchedEpisodes(viewModel: viewModel)
        }
    }
}
