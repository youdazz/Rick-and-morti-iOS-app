//
//  ListEpisodesPresenter.swift
//  Rick and Morti
//
//  Created by Youchen Zhou on 10/2/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListEpisodesPresentationLogic
{
    func presentFetchedEpisodes(episodes: [Episode], hasNextPage: Bool)
    func presentNewPageEpisodes(episodes: [Episode], hasNextPage: Bool)
    func presentOperationError(error: ServiceOperationError)
    func stopRefreshAnimation()
}

class ListEpisodesPresenter: ListEpisodesPresentationLogic
{
    
    weak var viewController: ListEpisodesDisplayLogic?
  
    func presentFetchedEpisodes(episodes: [Episode], hasNextPage: Bool) {
        var displayedEpisodes: [ListEpisodes.FetchEpisodes.ViewModel.DisplayedEpisode] = []
        for episode in episodes {
            let displayedEpisode = ListEpisodes.FetchEpisodes.ViewModel.DisplayedEpisode(name: episode.name, air_date: episode.air_date, episode: episode.episode)
            displayedEpisodes.append(displayedEpisode)
        }
        let viewModel = ListEpisodes.FetchEpisodes.ViewModel(displayedEpisodes: displayedEpisodes, hasNextPage: hasNextPage)
        DispatchQueue.main.async {
            self.viewController?.displayFetchesEpisodes(viewModel: viewModel)
        }
    }
    
    func presentNewPageEpisodes(episodes: [Episode], hasNextPage: Bool) {
        var displayedEpisodes: [ListEpisodes.FetchEpisodes.ViewModel.DisplayedEpisode] = []
        for episode in episodes {
            let displayedEpisode = ListEpisodes.FetchEpisodes.ViewModel.DisplayedEpisode(name: episode.name, air_date: episode.air_date, episode: episode.episode)
            displayedEpisodes.append(displayedEpisode)
        }
        let viewModel = ListEpisodes.FetchEpisodes.ViewModel(displayedEpisodes: displayedEpisodes, hasNextPage: hasNextPage)
        DispatchQueue.main.async {
            self.viewController?.displayNewPageEpisodes(viewModel: viewModel)
        }
    }
    
    func presentOperationError(error: ServiceOperationError) {
        DispatchQueue.main.async {
            var error_message = ""
            switch error{
            case .CannotFetch(let msg):
                error_message = msg
            case .CannotCreate(let msg):
                error_message = msg
            case .CannotDelete(let msg):
                error_message = msg
            }
            self.viewController?.displayError(msg: error_message)
        }
    }
    
    func stopRefreshAnimation() {
        DispatchQueue.main.async {
            self.viewController?.stopRefreshAnimation()
        }
    }
}
