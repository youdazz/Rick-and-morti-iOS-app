//
//  SearchCharacterViewController.swift
//  Rick and Morti
//
//  Created by Youchen Zhou on 10/2/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchCharacterDisplayLogic: AnyObject
{
}

class SearchCharacterViewController: UITableViewController, SearchCharacterDisplayLogic,UIPickerViewDataSource, UIPickerViewDelegate
{
    
  var interactor: SearchCharacterBusinessLogic?
  var router: (NSObjectProtocol & SearchCharacterRoutingLogic & SearchCharacterDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SearchCharacterInteractor()
    let presenter = SearchCharacterPresenter()
    let router = SearchCharacterRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
    
    @IBOutlet weak var statusLabel: UILabel!
    @IBOutlet weak var genderLabel: UILabel!
    @IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var specieTextField: UITextField!
    @IBOutlet weak var typeTextField: UITextField!
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
  }
  
    // MARK: SearchCharacter
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let row = indexPath.row
        if  row == 1{
            showStatusPicker()
        }
        
        if row == 4 {
            showGenderPicker()
        }
    }
    
    // MARK: Picker view
    
    var pickerData: [String] = []
    var selectedStatus: String?
    var selectedGender: String?
    
    func showStatusPicker(){
        let statusData = [
            CharacterStatus.alive.rawValue,
            CharacterStatus.dead.rawValue,
            CharacterStatus.unknown.rawValue
        ]
        pickerData = statusData
        showPickerView(title: "Coose status", message: "") { selectedStatus in
            DispatchQueue.main.async {
                self.selectedStatus = selectedStatus
                self.statusLabel.text = selectedStatus
            }
        }
    }
    
    func showGenderPicker(){
        let statusData = [
            CharacterGender.female.rawValue,
            CharacterGender.male.rawValue,
            CharacterGender.genderless.rawValue,
            CharacterGender.unknown.rawValue
        ]
        pickerData = statusData
        showPickerView(title: "Coose gender", message: "") { selectedGender in
            DispatchQueue.main.async {
                self.selectedGender = selectedGender
                self.genderLabel.text  = selectedGender
            }
        }
    }
    
    func showPickerView(title: String, message: String, doneAction: @escaping (String) -> Void){
        let vc = UIViewController()
        vc.preferredContentSize = CGSize(width: 250,height: 250)
        let pickerView = UIPickerView(frame: CGRect(x: 0, y: 0, width: 250, height: 250))
        pickerView.delegate = self
        pickerView.dataSource = self
        vc.view.addSubview(pickerView)
        let statusPickerAlert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        statusPickerAlert.setValue(vc, forKey: "contentViewController")
        statusPickerAlert.addAction(UIAlertAction(title: "Done", style: .default, handler: { action in
            let selectedRow = pickerView.selectedRow(inComponent: 0)
            let selectedText = self.pickerData[selectedRow]
            doneAction(selectedText)
        }))
        statusPickerAlert.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
        self.present(statusPickerAlert, animated: true)
    }
    
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return pickerData.count
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return pickerData[row]
    }
    
    // MARK: Search action
    
    func getCharacterFilter() -> SearchCharacterFilter{
        let name = nameTextField.text
        let status = selectedStatus
        let specie = specieTextField.text
        let type = typeTextField.text
        let gender =  selectedGender
        let filter = SearchCharacterFilter(name: name, status: status, specie: specie,  type: type, gender: gender)
        return filter
    }
    
    @IBAction func search(_ sender: Any?){
        let filter = getCharacterFilter()
        interactor?.saveFilter(searchFilter: filter)
        performSegue(withIdentifier: "ShowSearchCharacterList", sender: self)
    }
    
}
