//
//  ListCharactersViewController.swift
//  Rick and Morti
//
//  Created by Youchen Zhou on 4/2/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListCharactersDisplayLogic: AnyObject
{
    func displayFetchedCharacters(viewModel: ListCharacters.FetchCharacters.ViewModel)
    func displayFetchedCharactersStoredData(viewModel: ListCharacters.FetchCharacters.ViewModel)
    func displayNewPageCharacters(viewModel: ListCharacters.FetchCharacters.ViewModel)
    func displayError(msg: String)
    func stopRefreshAnimation()
}

class ListCharactersViewController: UITableViewController, ListCharactersDisplayLogic
{
    
  var interactor: ListCharactersBusinessLogic?
  var router: (NSObjectProtocol & ListCharactersRoutingLogic & ListCharactersDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ListCharactersInteractor()
    let presenter = ListCharactersPresenter()
    let router = ListCharactersRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
      super.viewDidLoad()
      self.tableView.register(UINib(nibName: "CharacterCell", bundle: nil), forCellReuseIdentifier: "CharacterCell")
      fetchCharactersFromCoreData()
      fetchCharactersFromNetwork()
      let refreshControl = UIRefreshControl()
      refreshControl.addTarget(self, action: #selector(refreshCharactersData(_:)), for: .valueChanged)
      self.tableView.refreshControl = refreshControl
  }
    
    @objc func refreshCharactersData(_ sender: Any?){
        fetchCharactersFromNetwork()
    }
    
    func stopRefreshAnimation(){
        self.tableView.refreshControl?.endRefreshing()
    }
  
    // MARK: Fetch Characters
    
    var displayedCharacters: [ListCharacters.FetchCharacters.ViewModel.DisplayedCharacter] = []
    var displayedImages: [Int: UIImage] = [:]
    var hasNextPage = false
    
    func fetchCharactersFromCoreData()
    {
      let request = ListCharacters.FetchCharacters.Request()
      interactor?.fetchFirstPageCharactersFromCoreData(request: request)
    }
    
    func fetchCharactersFromNetwork()
    {
      let request = ListCharacters.FetchCharacters.Request()
      interactor?.fetchFirstPageCharactersFromNetwork(request: request)
    }

    func displayFetchedCharacters(viewModel: ListCharacters.FetchCharacters.ViewModel)
    {
        self.hasNextPage = viewModel.hasNextPage
        displayedCharacters = viewModel.displayedCharacters
        tableView.reloadData()
    }
    
    func displayFetchedCharactersStoredData(viewModel: ListCharacters.FetchCharacters.ViewModel)
    {
        guard displayedCharacters.isEmpty else {
            return
        }
        self.hasNextPage = viewModel.hasNextPage
        displayedCharacters = viewModel.displayedCharacters
        tableView.reloadData()
    }
    
    func displayError(msg: String){
        self.showAlert(title: "Error", message: msg)
    }
    
    
  // MARK: Table view data source
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedCharacters.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let displayedCharacter = displayedCharacters[indexPath.row]
        let image = displayedImages[displayedCharacter.id]
        let cell = tableView.dequeueReusableCell(withIdentifier: "CharacterCell") as? CharacterCell
        cell?.characterImage.image = image
        if image == nil {
            loadImage(for: displayedCharacter, rowAt: indexPath)
        }
        cell?.nameLabel.text = displayedCharacter.name
        cell?.statusLabel.text = displayedCharacter.status
        return cell!
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let cell = tableView.cellForRow(at: indexPath)
        performSegue(withIdentifier: "ShowCharacter", sender: cell)
    }
    
    // MARK: Load image
    func loadImage(for displayedCharacter: ListCharacters.FetchCharacters.ViewModel.DisplayedCharacter,rowAt indexPath: IndexPath){
        getRemoteImage(from: displayedCharacter.image) { image in
            DispatchQueue.main.async {
                self.displayedImages[displayedCharacter.id] = image
                self.tableView.reloadRows(at: [indexPath], with: .automatic)
            }
        }
    }
    
    //MARK: Pagination
    var isFetchingNextPage = false
    
    func displayNewPageCharacters(viewModel: ListCharacters.FetchCharacters.ViewModel) {
        self.hasNextPage = viewModel.hasNextPage
        self.displayedCharacters.append(contentsOf: viewModel.displayedCharacters)
        self.tableView.reloadData()
        self.isFetchingNextPage = false
        self.tableView.tableFooterView = nil
    }
    
    override func scrollViewDidScroll(_ scrollView: UIScrollView) {
        guard hasNextPage == true else{
            return
        }
        
        let ROW_HEIGHT: Float = 88.0
        let NUMBER_OF_ROW_BEFORE_LOADING: Float = 4
        let ROWS_HEIGHT_BEFORE_LOADING = ROW_HEIGHT * NUMBER_OF_ROW_BEFORE_LOADING
        
        let position = scrollView.contentOffset.y
        if position > (tableView.contentSize.height - CGFloat(ROWS_HEIGHT_BEFORE_LOADING)) - scrollView.frame.size.height  {
            guard !self.isFetchingNextPage else {
                return
            }
            fetchNextPage()
        }
    }
    
    
    func fetchNextPage(){
        self.isFetchingNextPage = true
        DispatchQueue.main.async {
            self.tableView.tableFooterView = self.createFotterSpinnerView()
        }
        
        let request = ListCharacters.FetchCharacters.Request()
        interactor?.fetchNextPageCharacters(request: request)
    }
    
}
