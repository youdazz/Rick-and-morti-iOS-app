//
//  ListLocationsPresenter.swift
//  Rick and Morti
//
//  Created by Youchen Zhou on 10/2/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListLocationsPresentationLogic
{
    func presentFetchedLocations(locations: [Location], hasNextPage: Bool)
    func presentNewPageLocations(locations: [Location], hasNextPage: Bool)
    func presentOperationError(error: ServiceOperationError)
    func stopRefreshAnimation()
}

class ListLocationsPresenter: ListLocationsPresentationLogic
{
    
  weak var viewController: ListLocationsDisplayLogic?
  
    func presentFetchedLocations(locations: [Location], hasNextPage: Bool) {
        var displayedLocations: [ListLocations.FetchLocations.ViewModel.DisplayedLocation] = []
        for location in locations {
            let displayedEpisode = ListLocations.FetchLocations.ViewModel.DisplayedLocation(name: location.name, type: location.type, dimension: location.dimension, residentsCount: location.residents.count)
            displayedLocations.append(displayedEpisode)
        }
        let viewModel = ListLocations.FetchLocations.ViewModel(displayedLocations: displayedLocations, hasNextPage: hasNextPage)
        DispatchQueue.main.async {
            self.viewController?.displayFetchedLocations(viewModel: viewModel)
        }
    }
    
    func presentNewPageLocations(locations: [Location], hasNextPage: Bool) {
        var displayedLocations: [ListLocations.FetchLocations.ViewModel.DisplayedLocation] = []
        for location in locations {
            let displayedEpisode = ListLocations.FetchLocations.ViewModel.DisplayedLocation(name: location.name, type: location.type, dimension: location.dimension, residentsCount: location.residents.count)
            displayedLocations.append(displayedEpisode)
        }
        let viewModel = ListLocations.FetchLocations.ViewModel(displayedLocations: displayedLocations, hasNextPage: hasNextPage)
        DispatchQueue.main.async {
            self.viewController?.displayNewPageLocations(viewModel: viewModel)
        }
    }
    
    func presentOperationError(error: ServiceOperationError) {
        DispatchQueue.main.async {
            var error_message = ""
            switch error{
            case .CannotFetch(let msg):
                error_message = msg
            case .CannotCreate(let msg):
                error_message = msg
            case .CannotDelete(let msg):
                error_message = msg
            }
            self.viewController?.displayError(msg: error_message)
        }
    }
    
    func stopRefreshAnimation() {
        DispatchQueue.main.async {
            self.viewController?.stopRefreshAnimation()
        }
    }
}
