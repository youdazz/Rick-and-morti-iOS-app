//
//  ListLocationsInteractor.swift
//  Rick and Morti
//
//  Created by Youchen Zhou on 10/2/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListLocationsBusinessLogic
{
    func fetchFirstPageLocations(request: ListLocations.FetchLocations.Request)
    func fetchNextPageLocations(request: ListLocations.FetchLocations.Request)
}

protocol ListLocationsDataStore
{
  //var name: String { get set }
}

class ListLocationsInteractor: ListLocationsBusinessLogic, ListLocationsDataStore
{
  var presenter: ListLocationsPresentationLogic?
  var worker: ListLocationsWorker? = ListLocationsWorker(locationsApi: LocationsApi())
    var paginationInfo : PaginationInfo?
    var locations: [Location] = []

    func fetchFirstPageLocations(request: ListLocations.FetchLocations.Request) {
        worker?.fetchLocations { response in
            self.paginationInfo = response.info
            self.locations = response.results
            let hasNextPage = response.info.next != nil
            self.presenter?.presentFetchedLocations(locations: response.results, hasNextPage: hasNextPage)
            self.presenter?.stopRefreshAnimation()
        } errorHandler: { serviceOperationError in
            self.presenter?.presentOperationError(error: serviceOperationError)
        }
    }
    
    func fetchNextPageLocations(request: ListLocations.FetchLocations.Request) {
        guard let nextUrlString = paginationInfo?.next else {
            return
        }
        worker?.fetchNextPage(urlString: nextUrlString, completionHandler: { response in
            self.paginationInfo = response.info
            self.locations.append(contentsOf: response.results)
            let hasNextPage = response.info.next != nil
            self.presenter?.presentNewPageLocations(locations: response.results, hasNextPage: hasNextPage)
            self.presenter?.stopRefreshAnimation()
        }, errorHandler: { serviceOperationError in
            self.presenter?.presentOperationError(error: serviceOperationError)
        })
    }
}
