//
//  SearchCharacterListInteractor.swift
//  Rick and Morti
//
//  Created by Youchen Zhou on 13/2/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchCharacterListBusinessLogic
{
    func fetchCharactersFiltered(request: SearchCharacterList.SearchCharacter.Request)
    func fetchNextPageCharacters(request: SearchCharacterList.SearchCharacter.Request)
    func getFilter() -> SearchCharacterFilter?
}

protocol SearchCharacterListDataStore
{
  var filter: SearchCharacterFilter? { get set }
    var paginationInfo: PaginationInfo? {get set}
    var characters: [Character]? { get set}
}

class SearchCharacterListInteractor: SearchCharacterListBusinessLogic, SearchCharacterListDataStore
{
  var presenter: SearchCharacterListPresentationLogic?
  var worker: SearchCharacterListWorker? = SearchCharacterListWorker(characterApi: CharactersApi())
    var filter: SearchCharacterFilter?
    var paginationInfo: PaginationInfo?
    var characters: [Character]? = []
    
    func getFilter() -> SearchCharacterFilter?{
        return filter
    }
    
    func fetchCharactersFiltered(request: SearchCharacterList.SearchCharacter.Request) {
        worker?.fetchCharactersFiltered(filter: filter!, completionHandler: { response in
            self.paginationInfo = response.info
            self.characters = response.results
            let hasNextPage = response.info.next != nil
            self.presenter?.presentFetchedCharacters(characters: response.results, hasNextPage: hasNextPage)
        }, errorHandler: { serviceOperationError in
            self.presenter?.presentOperationError(error: serviceOperationError)
        })
    }
    
    func fetchNextPageCharacters(request: SearchCharacterList.SearchCharacter.Request){
        guard let nextUrl = paginationInfo?.next else {
            return
        }
        worker?.fetchNextPage(urlString: nextUrl) { response in
            self.paginationInfo = response.info
            self.characters?.append(contentsOf: response.results)
            let hasNextPage = response.info.next != nil
            self.presenter?.presentNewPageCharacters(characters: response.results, hasNextPage: hasNextPage)
        } errorHandler: { serviceOperationError in
            self.presenter?.presentOperationError(error: serviceOperationError)
        }
    }
}
