//
//  ListEpisodesInteractor.swift
//  Rick and Morti
//
//  Created by Youchen Zhou on 10/2/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListEpisodesBusinessLogic
{
    func fetchFirstPageEpisodes(request: ListEpisodes.FetchEpisodes.Request)
    func fetchNextPageEpisodes(request: ListEpisodes.FetchEpisodes.Request)
}

protocol ListEpisodesDataStore
{
    var episodes: [Episode] {get set}
}

class ListEpisodesInteractor: ListEpisodesBusinessLogic, ListEpisodesDataStore
{
    
    var presenter: ListEpisodesPresentationLogic?
    var worker: ListEpisodesWorker? =  ListEpisodesWorker(episodesApi: EpisodesApi())
    var episodes: [Episode] = []
    var paginationInfo: PaginationInfo?
    
    func fetchFirstPageEpisodes(request: ListEpisodes.FetchEpisodes.Request) {
        worker?.fetchEpisodes { response in
            self.paginationInfo = response.info
            self.episodes = response.results
            let hasNextPage = response.info.next != nil
            self.presenter?.presentFetchedEpisodes(episodes: response.results, hasNextPage: hasNextPage)
            self.presenter?.stopRefreshAnimation()
        } errorHandler: { serviceOperationError in
            self.presenter?.presentOperationError(error: serviceOperationError)
        }
    }
    
    func fetchNextPageEpisodes(request: ListEpisodes.FetchEpisodes.Request) {
        guard let nextUrlString = paginationInfo?.next else {
            return
        }
        worker?.fetchNextPage(urlString: nextUrlString, completionHandler: { response in
            self.paginationInfo = response.info
            self.episodes.append(contentsOf: response.results)
            let hasNextPage = response.info.next != nil
            self.presenter?.presentNewPageEpisodes(episodes: response.results, hasNextPage: hasNextPage)
            self.presenter?.stopRefreshAnimation()
        }, errorHandler: { serviceOperationError in
            self.presenter?.presentOperationError(error: serviceOperationError)
        })
    }

}
